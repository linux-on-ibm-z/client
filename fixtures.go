// Code generated by "esc -o fixtures.go -pkg client _fixtures/m1.yml _fixtures/m2.yml _fixtures/m3.yml _fixtures/m4.yml _fixtures/final.yml _fixtures/eval.yml"; DO NOT EDIT.

package client

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/_fixtures/eval.yml": {
		local:   "_fixtures/eval.yml",
		size:    1151,
		modtime: 1525804817,
		compressed: `
H4sIAAAAAAAC/+yTwYrbMBCG74G8w0/SvRQUZ0MowT0u2xdYel4UeeyokSUxI2Wbty+SnbCUbk899mRk
/fPNfB68xjfrtYPk42hFbPDorSP0gfH89Iz99oCXyNYP2G0fD8sFa9suF8CFuKRbbDe7crajHqiFeYuk
WYJvyNB+e3gdf3pKr10wZ+JWj92XvRpiVgUmUTmdSNJywSQhsyGpbBNzfQKazckmMikztajl5WL4IBC1
GO2mGxOyTy0ey8lTegt8btFrJ7RcmDCO2ndTt2O2rptxCs3R+uao5QRlsDIRii+4yQib5jOa6tSUQ4jE
OgVuTJYUxhXWMCFeMQTX0fQpBSmgVmByRGKiv7eb+9TJ7sx0IkQOP8gk9IXPhTyFIAF0Ib6mU1mVjnUL
sL5W5eiC7v7csixa2JToe8mv6ALKOBd8KtcfOzebkvV0n3O2/M39vbS3hqD8botRnwnqacZjPS1jKrml
o407WC9JOwelshBD0W2ieE2n4AGs75n51dH6zvpB7t5ZuLonOxJUj9XD9wp7eJGrJBrxQOR0FOpWN0ZD
F+2UGLYxSdOXX2UTr/+J/4r4KwAA///dyLLifwQAAA==
`,
	},

	"/_fixtures/final.yml": {
		local:   "_fixtures/final.yml",
		size:    823,
		modtime: 1525804895,
		compressed: `
H4sIAAAAAAAC/3yTQYvbMBCF74H8h0fSXAqKsyGU4B6X7R9Yel4UeeyokSUxI2Wbf18kO2Ep3Z7MeN68
mc8Pr/HDeu0g+TRaERs8eusIfWC8PL/gsDviNbL1A/a7p+Nywdq2ywVwJS7qFrvtvtR21AO1MO+RNEvw
DRk67I5v429P6a0L5kLc6rH7dlBDzKqYSVROJ5K0XDBJyGxIqreJuT4BzeZsE5mUmVrU8dIYPhFELUa7
qWNC9qnFU6k8pffAlxa9dkLLhQnjqH03bTtl67rZTqE5Wd+ctJyhDFYmQvEVdxhh03xFU5maUoRIrFPg
xmRJYVxhDRPiDUNwHU2fUpAC6gQmRiQm+v+6eU+97OGZzoTI4ReZhL74c3GeRJAAuhLf0rlEpWNNAdbX
qRxd0N2/V5aghU2RfoT8ji6gnHPFl9L+nLnZFq2nx50z5V/sH6G9NQTl9zuM+kJQz7M91lMY08hdHW3c
w3pJ2jkolYUYiu4XxVs6Bw9g/dDMr07Wd9YP8uDOwpU92ZGgeqw2P6vZ5lVukmjEhsjpKNSt7h4NXbVT
YtjGJE1ffpVtvC0XfwIAAP//ako4cjcDAAA=
`,
	},

	"/_fixtures/m1.yml": {
		local:   "_fixtures/m1.yml",
		size:    907,
		modtime: 1525804817,
		compressed: `
H4sIAAAAAAAC/6yRTYsaQRCG74L/4UXjJdCOigSZHJc95rTkvLQ95dixv6jqdjP/PvSMyhKyOe1J2nrr
qXqmlvhhHUmOgbCFlKO3IjYGnKwjnCLj+ekZ+80BL4lt6LHbbA/zGWvbzmfAlbimW2zWu/q2XvfUwrwl
0iwxNGRovzm8+t+B8msXzYW41b77tld9KqrCJCmnM0mez5gkFjYkI9ukMv4Cms3ZZjK5MLUY22uh/yCQ
tBjtpoqJJeQW2/oKlN8iX1qctBOaz0z0XodumnYs1nU3nEJztKE5ajlDGSxMguIr7jLCpvmKZnRq6iMm
Yp0jN6ZIjn6BJUxMA/roOpo+pSBHjB2YHJGZ6P/jbnPGzR7MfCYkjr/IZJwqnyt5CkEi6Eo85HM9lU7j
FWDD2FWSi7r798h6aGFTo+8lv6OLqOtc8aWWP3Zu1jUb6LHnzfIv9/fSwRqCCrsNvL4Q1NMNj+V0jKnl
nk427WCDZO0clCpCDEX3jdKQzzEAWD4yt7+ONnQ29PLwLsKje7aeoE5YrH6OsNWLDJLJY0XkdBLqFndG
Q1ftlBi2KUvjt+vtOg2fCtyt0/AnAAD//z5PlXeLAwAA
`,
	},

	"/_fixtures/m2.yml": {
		local:   "_fixtures/m2.yml",
		size:    828,
		modtime: 1525804817,
		compressed: `
H4sIAAAAAAAC/3yRT4vbMBDF74F8h0fSvRQUJyaU4B6XPfa09Lwo8sRRo3/MSNnm2xfZTlhKtycznjdv
5qe3xg/rSHIMhBZSjt6K2Bhwso5wioyX5xfstwe8JrZhQLvdHZYL1rZbLoArcVV32G7aWluvB+pg3hNp
lhgaMrTfHt7870D5rY/mQtxp33/bqyEVVc0kKaczSV4umCQWNiSjt0ll/AKazdlmMrkwdRjHa2P4RJC0
GO2mjokl5A67WgXK75EvHU7aCS0XJnqvQz9tOxbr+tlOoTna0By1nKEMViZB8RV3GGHTfEUzMjW1iIlY
58iNKZKjX2ENE9MNQ3Q9TU8pyBHjBCZGZCb6/7p5z3jZwzOfCYnjLzIZp+rP1XkSQSLoSnzL5xqVTmMK
sGGcKslF3f97ZQ1a2FTpR8jv6CPqOVd8qe3PmZtN1QZ63DlT/sX+ETpYQ1Ch3cLrC0E9z/ZYT2FMI3d1
sqmFDZK1c1CqCDEU3S9Kt3yOAcD6oZl/HW3obRjkwV2ER/ZsPUGdsHr6OZo9vcpNMnk8ETmdhPrV3aOh
q3ZKDNuUpfHtZrdJt+XiTwAAAP//6pjj7jwDAAA=
`,
	},

	"/_fixtures/m3.yml": {
		local:   "_fixtures/m3.yml",
		size:    828,
		modtime: 1525804817,
		compressed: `
H4sIAAAAAAAC/3yRT4/aMBDF70h8hycol0omwKIKpcfVHnta9bwyzhBc/E8zNlu+feUkoFXV7SmazJs3
8/Nb4od1JDkGwhOkHL0VsTHgZB3hFBkvzy/Ybw54TWxDj91me5jPWNt2PgOuxFXdYrPe1dp63VML855I
s8TQkKH95vDmfwfKb100F+JW++7bXvWpqGomSTmdSfJ8xiSxsCEZvE0qwxfQbM42k8mFqcUwXhv9J4Kk
xWg3dkwsIbfY1ipQfo98aXHSTmg+M9F7Hbpx27FY1012Cs3Rhuao5QxlsDAJiq+4wwib5iuagampRUzE
OkduTJEc/QJLmJhu6KPraHxKQY4YJjAyIjPR/9dNe4bLHp75TEgcf5HJOFV/rs6jCBJBV+JbPteodBpS
gA3DVEku6u7fK2vQwqZKP0J+RxdRz7niS21/ztysqzbQ486J8i/2j9DBGoIKuw28vhDU82SP5RjGOHJX
J5t2sEGydg5KFSGGovtF6ZbPMQBYPjTTr6MNnQ29PLiL8MCerSeoExarn4PZ6lVuksljReR0EuoWd4+G
rtopMWxTlsY/rbfrdJvP/gQAAP//h0pgOzwDAAA=
`,
	},

	"/_fixtures/m4.yml": {
		local:   "_fixtures/m4.yml",
		size:    828,
		modtime: 1525804817,
		compressed: `
H4sIAAAAAAAC/3yRT4saQRDF74Lf4aHZS6AdFQkyOS57zGnJeWl7yrFj/6Oq243fPnSPyhKyOQ019epV
/fot8cM6khwDYQcpB29FbAw4Wkc4RsbL8wt26z1eE9swYrve7Ocz1rafz4ALcVX3WK+2tbZej9TDvCfS
LDF0ZGi33r/534Hy2xDNmbjXfvi2U2MqqppJUk5nkjyfMUksbEiat0mlfQHN5mQzmVyYerTx2hg/ESQt
RrupY2IJucemVoHye+Rzj6N2QvOZid7rMEzbDsW64Wan0B1s6A5aTlAGC5Og+II7jLDpvqJrTF0tYiLW
OXJniuToF1jCxHTFGN1A01MKckSbwMSIzET/X3fb0y57eOYTIXH8RSbjWP25Ok8iSARdiK/5VKPSqaUA
G9pUSS7q4d8ra9DCpko/Qn7HEFHPueBLbX/O3K2qNtDjzhvlX+wfoYM1BBW2a3h9Jqjnmz2WUxjTyF2d
bNrCBsnaOShVhBiK7helaz7FAGD50Nx+HWwYbBjlwV2EG3u2nqCOWDz9bGZPr3KVTB5PRE4noWFx9+jo
op0SwzZl6fxutVml63z2JwAA//9Hf3h+PAMAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/_fixtures": {
		isDir: true,
		local: "_fixtures",
	},
}
