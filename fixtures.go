// Code generated by "esc -o fixtures.go -pkg client -private _fixtures/m1.yml _fixtures/m2.yml _fixtures/m3.yml _fixtures/m4.yml _fixtures/final.yml _fixtures/eval.yml"; DO NOT EDIT.

package client

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/_fixtures/eval.yml": {
		local:   "_fixtures/eval.yml",
		size:    1108,
		modtime: 1540672691,
		compressed: `
H4sIAAAAAAAC/+yTwW7bMBBE7/qKgV1fCtByDKMw1GOQ/kDQc0BTa5kNRRK7pFr/fUFKNoIi7anHnAyT
M29nuNAa36zXDpJPoxWxweNsHeEcGE+PTzjsjniObP2A/e7h2LC2XQNMxEXbYbfdN4Ad9UAdzM9ImiX4
lgwddseX8Zen9NIH80rc6bH/clBDzKqQJCqnE0lqmCRkNiQFbGIuP4Bmc7GJTMpMHaq3AYb3r6fgkq7n
JmSfOjw0Joyj9n2FnrJ1/exTaE/WtyctFyiDlYlQPOEWWNi0n9HW3G35EyKxToFbkyWFcYU1TIhXDMH1
NL+VIAVUB+YiSEz0z2nLmJrrjkwXQuTwg0zCueC5gGcRJIAm4mu6lFXoWB8a1ldXji7o/t2JZY/Cpijf
VvyKPqCkmfCpXP+9cbstWk/3mEvHP5q/qeytISi/32HUrwT1uNCxnhcxOxZxtHEP6yVp56BUFmIouuWJ
13QJHuu7Yjk4Wd9bP8itchautZMdCeqM1eZ7JW2e5SqJRmyInI5C/eqGaGnSTolhG5O05/IRbOP1A/gf
gL8DAAD//6vo9dhUBAAA
`,
	},

	"/_fixtures/final.yml": {
		local:   "_fixtures/final.yml",
		size:    784,
		modtime: 1540672694,
		compressed: `
H4sIAAAAAAAC/3yTz44aPRDE7/MUJfi4fJIZFqEITY6rzQuscl4ZTzM463/qtifh7SN7AK2iTU4Iu+rX
VW7NGt9s0A5STt6K2Bhwto5wjoyX5xccdke8JrZhwn73dOxY26EDZuKqHbDb7jvAej3RAPMzkWaJoSdD
h93xzf8KlN/GaN6JB+3HLwc1paIqSZJyOpPkjkliYUNSwSaV+gNoNhebyeTCNKB5O2D6/HqOLut2bmIJ
ecBTZ6L3OowNeirWjYtPoT/Z0J+0XKAMViZB8Yx7YGHT/4++5e7rn5iIdY7cmyI5+hXWMDFdMUU30vJW
ghzRHFiKIDPRP6fdxrRcD2S+EBLHH2QyzhXPFbyIIBE0E1/zpa5Cp/bQsKG5SnJRj59OrHsUNlX5seJX
jBE1zYz/6vXfG/fbqg30iHnr+EfzD5WDNQQV9jt4/U5Qzzc61ssiFsdNnGzawwbJ2jkoVYQYiu550jVf
YsD6obgdnGwYbZjkXrkIt9rZeoI6Y7X53kibV7lKJo8NkdNJaFzdET3N2ikxbFOW/lw/gm26dr8DAAD/
/y6do3YQAwAA
`,
	},

	"/_fixtures/m1.yml": {
		local:   "_fixtures/m1.yml",
		size:    869,
		modtime: 1540672698,
		compressed: `
H4sIAAAAAAAC/6yRvY7bMBCEez3FwI6bALRswwgMpTxcmeqQ+kBTa5k5/mGXVOK3DyjJxiG4pEoliJz5
doa7xjfrSHIMhD2knL0VsTHgYh3hEhnPT8847k54SWzDgMNuf2pY264BRuKq7bDbHhrAej1QB/MzkWaJ
oSVDx93p1f8KlF/7aN6IO+37L0c1pKIqSZJyOpPkhkliYUNSwSaV+gE0m6vNZHJh6jB5G2D4+HqMLuvp
3MQScod9Y6L3OvQT9Fys62efQnu2oT1ruUIZrEyC4hH3wMKm/Yx2yt3Wn5iIdY7cmiI5+hXWMDHdMETX
0/xWghwxOTAXQWaif05bxky5Hsh8JSSOP8hkXCqeK3gWQSJoJL7la12FTtNDw4bJVZKLuv9wYt2jsKnK
9xW/oo+oaUZ8qtd/b9xuqzbQI+bS8Y/m7yoHawgqHHbw+o2gnhY61vMiZsciTjYdYINk7RyUKkIMRfc8
6ZavMWD9UCwHZxt6Gwa5Vy7CU+1sPUFdsNp8n0ibF7lJJo8NkdNJqF/dES2N2ikxbFOW1u+3+226/U/e
ofJ+BwAA//8uALIiZQMAAA==
`,
	},

	"/_fixtures/m2.yml": {
		local:   "_fixtures/m2.yml",
		size:    789,
		modtime: 1540672701,
		compressed: `
H4sIAAAAAAAC/3yRzW7bMBCE73qKgV1fCtCyBaMw1GOQY09BzwFNrWU2/MMuqdZvX1CyjaBIcxJEznw7
w13jh3UkOQZCByknb0VsDDhbRzhHxvPTMw67I14S2zCi2+2PDWvbN8BEXLU9dtuuAazXI/UwvxNplhha
MnTYHV/9n0D5dYjmjbjXfvh2UGMqqpIkKaczSW6YJBY2JBVsUqkfQLO52EwmF6Yes7cBxo+vp+iyns9N
LCH32Dcmeq/DMENPxbph8Sm0Jxvak5YLlMHKJCiecA8sbNqvaOfcbf2JiVjnyK0pkqNfYQ0T0xVjdAMt
byXIEbMDSxFkJvp02m3MnOuBzBdC4viLTMa54rmCFxEkgibia77UVeg0PzRsmF0luaiHDyfWPQqbqnxf
8TuGiJpmwpd6/f/G7bZqAz1i3jr+0/xd5WANQYVuB6/fCOrpRsd6WcTiuImTTR1skKydg1JFiKHonidd
8yUGrB+K28HJhsGGUe6Vi/BcO1tPUGesNj9n0uZFrpLJY0PkdBIaVndES5N2SgzblKX13Xa/TdfmbwAA
AP//yCe9qxUDAAA=
`,
	},

	"/_fixtures/m3.yml": {
		local:   "_fixtures/m3.yml",
		size:    789,
		modtime: 1540672703,
		compressed: `
H4sIAAAAAAAC/3yRz27bPBDE73qKgf358gG0bMcoDPUY5NhT0HNAU2uZDf9hl1Trty8oyUZQpD0JImd+
O8Nd45t1JDkGwhOknL0VsTHgYh3hEhkvzy847k54TWzDgMNuf2pY264BRuKq7bDbHhrAej1QB/MzkWaJ
oSVDx93pzf8KlN/6aN6JO+37L0c1pKIqSZJyOpPkhkliYUNSwSaV+gE0m6vNZHJh6jB5G2D4/HqMLuvp
3MQScod9Y6L3OvQT9Fys62efQnu2oT1ruUIZrEyC4hH3wMKm/R/tlLutPzER6xy5NUVy9CusYWK6YYiu
p/mtBDlicmAugsxE/5y2jJlyPZD5Skgcf5DJuFQ8V/AsgkTQSHzL17oKnaaHhg2TqyQXdf/pxLpHYVOV
Hyt+RR9R04z4r17/vXG7rdpAj5hLxz+af6gcrCGocNjB63eCel7oWM+LmB2LONl0gA2StXNQqggxFN3z
pFu+xoD1Q7EcnG3obRjkXrkIT7Wz9QR1wWrzfSJtXuUmmTw2RE4noX51R7Q0aqfEsE1ZWv+03W/Trfkd
AAD//+9MgeIVAwAA
`,
	},

	"/_fixtures/m4.yml": {
		local:   "_fixtures/m4.yml",
		size:    789,
		modtime: 1540672706,
		compressed: `
H4sIAAAAAAAC/3yRzW7bMBCE73qKgV1fCtCyDaMw1GOQY09BzwFNrWU2/MMuqdZvX1CSjaBIcxJEznw7
w13jh3UkOQbCEVLO3orYGHCxjnCJjOenZxx3J7wktmHAYbc/Naxt1wAjcdV22G0PDWC9HqiD+Z1Is8TQ
kqHj7vTq/wTKr300b8Sd9v23oxpSUZUkSTmdSXLDJLGwIalgk0r9AJrN1WYyuTB1mLwNMHx8PUaX9XRu
Ygm5w74x0Xsd+gl6Ltb1s0+hPdvQnrVcoQxWJkHxiHtgYdN+RTvlbutPTMQ6R25NkRz9CmuYmG4Youtp
fitBjpgcmIsgM9Gn05YxU64HMl8JieMvMhmXiucKnkWQCBqJb/laV6HT9NCwYXKV5KLuP5xY9yhsqvJ9
xe/oI2qaEV/q9f8bt9uqDfSIuXT8p/m7ysEaggqHHbx+I6inhY71vIjZsYiTTQfYIFk7B6WKEEPRPU+6
5WsMWD8Uy8HZht6GQe6Vi/BUO1tPUBesNj8n0uZFbpLJY0PkdBLqV3dES6N2SgzblKX1x+1+m27N3wAA
AP//W1tFxhUDAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/_fixtures": {
		isDir: true,
		local: "_fixtures",
	},
}
