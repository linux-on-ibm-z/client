// Code generated by "esc -o fixtures.go -pkg client _fixtures/m1.yml _fixtures/m2.yml _fixtures/m3.yml _fixtures/m4.yml _fixtures/final.yml _fixtures/eval.yml"; DO NOT EDIT.

package client

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/_fixtures/eval.yml": {
		local:   "_fixtures/eval.yml",
		size:    1128,
		modtime: 1519775459,
		compressed: `
H4sIAAAAAAAC/+yTwYrbMBCG736Kn6R7KSjOhlCCe1y2L7D0vCjy2FEjS2JGyjZvXyQ7YSnbnnrsydj6
55v5NHiNb9ZrB8nHyYrY4DFYRxgC4/npGfvtAS+RrR+x2z4eGta2a4ALccl22G52DWAnPVIH8xZJswTf
kqH99vA6/fSUXvtgzsSdnvovezXGrApJonI6kaSGSUJmQ1LAJubyADSbk01kUmbqUGsbYPz4OGox2tUD
E7JPHR4bwFN6C3zuMGgn1JgwTdr3tc0xW9fPJIX2aH171HKCMliZCMUX3BSETfsZbTVpy0uIxDoFbk2W
FKYV1jAhXjEG19N8e4IUUCswqyEx0V+7LW3qXHdkOhEihx9kEoaC5wKeQ5AAuhBf06ksR8d69bC+VuXo
gu4/7Fg2K2xK8r3iV/QBZZoLPpXjPxu3m5L1dB9zcfzN/J2yt4ag/G6LSZ8J6mmhYz0vYq5YwtHGHayX
pJ2DUlmIoeg2T7ymU/AA1vfM8ulofW/9KDfpLFzFk50IasDq4XtlPbzIVRJNeCByOgr1qxuipYt2Sgzb
mKQdyo+xidf/wH8A/BUAAP//5LuIq2gEAAA=
`,
	},

	"/_fixtures/final.yml": {
		local:   "_fixtures/final.yml",
		size:    810,
		modtime: 1519775462,
		compressed: `
H4sIAAAAAAAC/3yRwY7aMBCG73mKX9C9VDIBhCqUHld77GnV88o4k+Di2NaMzZa3r+wEtKq2PSEy/3wz
n2eNH9aRpOAJO0g+TVbEBo/BOsIQGC/PLzhsj3iNbP2I/XZ3bFjbrgGuxCXbYbvZN4Cd9EgdzHskzRJ8
S4YO2+Pb9NtTeuuDuRB3euq/HdQYsyokicrpRJIaJgmZDUkBm5jLD6DZnG0ikzJTh9rbAOPn5ajFaFcL
JmSfOuwawFN6D3zpMGgn1JgwTdr3dcwpW9fPJIX2ZH170nKGMliZCMVX3BWETfsVbTVpy58QiXUK3Jos
KUwrrGFCvGEMrqf59QQpoHZgVkNiov9OW8bUvR7IdCZEDr/IJAwFzwU8hyABdCW+pXM5jo716WF97crR
Bd1/OrFcVtiU5EfF7+gDyjZXfCnlfxu3m5L19FhzcfzL/IOyt4ag/H6LSV8I6nmhYz0fYu5YwtHGPayX
pJ2DUlmIoei+T7ylc/AA1o/M8ulkfW/9KHfpLFzFk50IasDq6WdlPb3KTRJNeCJyOgr1qzuipat2Sgzb
mKQdrNduE2/NnwAAAP//pn3v1ioDAAA=
`,
	},

	"/_fixtures/m1.yml": {
		local:   "_fixtures/m1.yml",
		size:    888,
		modtime: 1519775465,
		compressed: `
H4sIAAAAAAAC/6yRTY/aMBCG7/kVr6BcKpkAQhVKj6s99rTqeWWcIbj4SzM22/z7ygmgVbXtaU+IzDvP
zONZ4od1JDkGwhZSjt6K2Bhwso5wioznp2fsNwe8JLZhwG6zPTSsbdcAV+Ka7bBZ7xrAej1QB/OWSLPE
0JKh/ebw6n8Hyq99NBfiTvv+214NqahKkqScziS5YZJY2JBUsEml/gCazdlmMrkwdZh6G2D4uJy0GO2m
gokl5A7bBgiU3yJfOpy0E2pM9F6HfhpzLNb1M0mhPdrQHrWcoQwWJkHxFXcFYdN+RTuZtPVPTMQ6R25N
kRz9AkuYmEYM0fU0v54gR0wdmNWQmei/025jpr0eyHwmJI6/yGScKp4reA5BIuhKPOZzPY5O09PDhqmr
JBd1/+HEellhU5PvFb+jj6jbXPGllv9t3K5rNtBjzZvjX+bvlIM1BBV2G3h9IainGx3L+RBzxy2cbNrB
BsnaOShVhBiK7vukMZ9jALB8ZG6fjjb0Ngxyly7Ck3i2nqBOWKx+TqzVi4ySyWNF5HQS6hd3REtX7ZQY
tilL67fr7TqNn8nbrdP4JwAA//86JQmdeAMAAA==
`,
	},

	"/_fixtures/m2.yml": {
		local:   "_fixtures/m2.yml",
		size:    809,
		modtime: 1519775469,
		compressed: `
H4sIAAAAAAAC/3yRTY/aMBCG7/kVr6B7qWQCEapQelztsadVzyvjDMHFX5qx2fLvKycBraptT4jMO8/M
41njh3UkOQZCBylHb0VsDDhZRzhFxsvzC/bbA14T2zCi2+4ODWvbN8CVuGZ7bDddA1ivR+ph3hNplhha
MrTfHt7870D5bYjmQtxrP3zbqzEVVUmSlNOZJDdMEgsbkgo2qdQfQLM520wmF6YeU28DjJ+Xkxaj3VQw
sYTcY9cAgfJ75EuPk3ZCjYne6zBMY47FumEmKbRHG9qjljOUwcokKL7iriBs2q9oJ5O2/omJWOfIrSmS
o19hDRPTDWN0A82vJ8gRUwdmNWQm+u+0Zcy01wOZz4TE8ReZjFPFcwXPIUgEXYlv+VyPo9P09LBh6irJ
RT18OrFeVtjU5EfF7xgi6jZXfKnlfxu3m5oN9FhzcfzL/INysIagQreF1xeCel7oWM+HmDuWcLKpgw2S
tXNQqggxFN33Sbd8jgHA+pFZPh1tGGwY5S5dhCfxbD1BnbB6+jmxnl7lJpk8noicTkLD6o5o6aqdEsM2
ZWl9t9lt0q35EwAA//+141I6KQMAAA==
`,
	},

	"/_fixtures/m3.yml": {
		local:   "_fixtures/m3.yml",
		size:    809,
		modtime: 1519775472,
		compressed: `
H4sIAAAAAAAC/3yRTY/aMBCG7/kVr6BcKpkAiyqUHld77GnV88o4Q3Dxl2Zstvz7yklAq2rbEyLzzjPz
eJb4YR1JjoHwBClHb0VsDDhZRzhFxsvzC/abA14T2zBgt9keGta2a4Arcc122Kx3DWC9HqiDeU+kWWJo
ydB+c3jzvwPltz6aC3Gnff9tr4ZUVCVJUk5nktwwSSxsSCrYpFJ/AM3mbDOZXJg6jL0NMHxeTlqMdmPB
xBJyh20DBMrvkS8dTtoJNSZ6r0M/jjkW6/qJpNAebWiPWs5QBguToPiKu4Kwab+iHU3a+icmYp0jt6ZI
jn6BJUxMNwzR9TS9niBHjB2Y1JCZ6L/T5jHjXg9kPhMSx19kMk4VzxU8hSARdCW+5XM9jk7j08OGsask
F3X/6cR6WWFTkx8Vv6OPqNtc8aWW/23crms20GPN2fEv8w/KwRqCCrsNvL4Q1PNMx3I6xNQxh5NNO9gg
WTsHpYoQQ9F9n3TL5xgALB+Z+dPRht6GQe7SRXgUz9YT1AmL1c+RtXqVm2TyWBE5nYT6xR3R0lU7JYZt
ytL6p/V2nW7NnwAAAP//w3iGmykDAAA=
`,
	},

	"/_fixtures/m4.yml": {
		local:   "_fixtures/m4.yml",
		size:    809,
		modtime: 1519775476,
		compressed: `
H4sIAAAAAAAC/3yRTW8aMRCG7/srXkFzqWQWEKrQ9hjl2FPUc2S8w+LiL83YpPz7yl5AUZX2hNh555l5
PEv8sI4kx0DYQcrBWxEbA47WEY6R8fL8gt16j9fENkzYrjf7jrUdOuBCXLMD1qttB1ivJxpg3hNplhh6
MrRb79/870D5bYzmTDxoP37bqSkVVUmSlNOZJHdMEgsbkgo2qdQfQLM52UwmF6YBrbcDps/LSYvRrhVM
LCEP2HRAoPwe+TzgqJ1QZ6L3OoxtzKFYN84khf5gQ3/QcoIyWJgExRfcFYRN/xV9M+nrn5iIdY7cmyI5
+gWWMDFdMUU30vx6ghzROjCrITPRf6fdxrS9Hsh8IiSOv8hkHCueK3gOQSLoQnzNp3ocndrTw4bWVZKL
evx0Yr2ssKnJj4rfMUbUbS74Usv/Nu5XNRvosebN8S/zD8rBGoIK2zW8PhPU842O5XyIueMWTjZtYYNk
7RyUKkIMRfd90jWfYgCwfGRunw42jDZMcpcuwk08W09QRyyefjbW06tcJZPHE5HTSWhc3BE9XbRTYtim
LL3frTardO3+BAAA//8DtEtIKQMAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/_fixtures": {
		isDir: true,
		local: "_fixtures",
	},
}
