// Code generated by "esc -o fixtures.go -pkg client _fixtures/m1.yml _fixtures/m2.yml _fixtures/m3.yml _fixtures/m4.yml _fixtures/final.yml _fixtures/eval.yml"; DO NOT EDIT.

package client

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/_fixtures/eval.yml": {
		local:   "_fixtures/eval.yml",
		size:    1128,
		modtime: 1519775310,
		compressed: `
H4sIAAAAAAAC/+yTwY7bPAyE736KQfLn8gOKs0FQBO5xsX2BRc8LRaYdNbIkkFK2eftCshMUxbanHnsy
bA6/4ZDwGl+s1w6ST5MVscFjsI4wBMbL8wsOuyNeI1s/Yr97OjasbdcAV+Ki7bDb7hvATnqkDuY9kmYJ
viVDh93xbfruKb31wVyIOz31nw5qjFkVkkTldCJJDZOEzIakgE3M5QFoNmebyKTM1KH2NsD4cTlqMdrV
ggnZpw5PDeApvQe+dBi0E2pMmCbt+2pzytb1M0mhPVnfnrScoQxWJkLxFUsEJWza/9HWJG15CZFYp8Ct
yZLCtMIaJsQbxuB6mrcnSAG1A3M0JCb6o9tiU+d6INOZEDl8I5MwFDwX8CyCBNCV+JbO5Tg61tXD+tqV
owu6/9CxXFbYFOVyper9GX1AmeaK/0r594nbbdF6eoy5ZPwl+U+RvTUE5fc7TPpCUM8LHev5EHPHIo42
7mG9JO0clMpCDEX3eeItnYMHsH5olk8n63vrR7mHzsI1eLITQQ1Ybb5W1uZVbpJowobI6SjUr+6Ilq7a
KTFsY5J2KD/GNt7+Af8C8EcAAAD//yIxBTBoBAAA
`,
	},

	"/_fixtures/final.yml": {
		local:   "_fixtures/final.yml",
		size:    810,
		modtime: 1519775301,
		compressed: `
H4sIAAAAAAAC/3yRwY7bPAyE736KQfLn8gOKkyAoAve42GNPi54Xikw7amRJIKVs8/aFZCcoim1PhsXh
DD9yjW/WkaTgCXtIPk9WxAaPwTrCEBivL6847k54i2z9iMNuf2pY264BbsRF22G3PTSAnfRIHcxHJM0S
fEuGjrvT+/TTU3rvg7kSd3rqvxzVGLMqThKV04kkNUwSMhuSYmxiLh9As7nYRCZlpg61twHGz8tRi9Gu
FkzIPnXYN4Cn9BH42mHQTqgxYZq072vMOVvXz04K7dn69qzlAmWwMhGKb1gQlLBp/0dbSdryEyKxToFb
kyWFaYU1TIh3jMH1NG9PkAJqB2Y0JCb6Z9oSU+d6WqYLIXL4QSZhKPZcjGcRJIBuxPd0KcfRsa4e1teu
HF3Q/aeJ5bLCpiiXK9Xsr+gDyjQ3/FfKfydut0Xr6TnmwvgH+W/I3hqC8ocdJn0lqJfFHev5EHPHIo42
HmC9JO0clMpCDEWPeeI9XYIHsH5qlqez9b31ozygs3AFT3YiqAGrzffqtXmTuySasCFyOgr1q4dFSzft
lBi2MUk7WK/dNt6bXwEAAP//fWLWmyoDAAA=
`,
	},

	"/_fixtures/m1.yml": {
		local:   "_fixtures/m1.yml",
		size:    888,
		modtime: 1519775296,
		compressed: `
H4sIAAAAAAAC/6yRQYvbMBCF7/4Vj6R7KShOQijBPS577GnpeVHkiaNGlsSMlK3/fZHshFK2PfVkrHnz
vXkza3yzjiQFT9hB8mm0IjZ4nK0jnAPj5fkFh+0Rr5GtH7Df7o4Na9s1wI24aDtsN/sGsKMeqIN5j6RZ
gm/J0GF7fBt/ekpvfTBX4k6P/ZeDGmJWhSRROZ1IUsMkIbMhKWATc/kAms3FJjIpM3WovQ0wfFyOWox2
tWBC9qnDrgE8pffA1w5n7YQaE8ZR+77anLJ1/UxSaE/WtyctFyiDlYlQfMMSQQmb9jPamqQtPyES6xS4
NVlSGFdYw4Q4YQiup3l7ghRQOzBHQ2Kif7otNnWuBzJdCJHDDzIJ54LnAp5FkAC6EU/pUo6jY109rK9d
Obqg+w8dy2WFTVEuV6reX9EHlGlu+FTKf0/cborW02PMJeMfyX+L7K0hKL/fYtRXgnpe6FjPh5g7FnG0
cQ/rJWnnoFQWYii6zxOndAkewPqhWZ5O1vfWD3IPnYVr8GRHgjpj9fS9sp5eZZJEI56InI5C/eqOaOmm
nRLDNiZpx91mt4nT/+TtN3H6FQAA//+uB/tveAMAAA==
`,
	},

	"/_fixtures/m2.yml": {
		local:   "_fixtures/m2.yml",
		size:    809,
		modtime: 1519775316,
		compressed: `
H4sIAAAAAAAC/3yRwY7bPAyE736KQfLn8gOKEyMoAve42GNPi54Xisw4amRJIKVs8/aFZCcoim1PhsXh
DD9yjW/WkaTgCR0knyYrYoPH2TrCOTBeX15x2B3xFtn6Ed1uf2xY274BbsRF22O37RrATnqkHuYjkmYJ
viVDh93xffrpKb0PwVyJez0NXw5qjFkVJ4nK6USSGiYJmQ1JMTYxlw+g2VxsIpMyU4/a2wDj5+WoxWhX
CyZkn3rsG8BT+gh87XHWTqgxYZq0H2rMKVs3zE4K7cn69qTlAmWwMhGKb1gQlLBp/0dbSdryEyKxToFb
kyWFaYU1TIh3jMENNG9PkAJqB2Y0JCb6Z9oSU+d6WqYLIXL4QSbhXOy5GM8iSADdiO/pUo6jY109rK9d
Obqgh08Ty2WFTVEuV6rZXzEElGlu+K+U/07cbovW03PMhfEP8t+QvTUE5bsdJn0lqJfFHev5EHPHIo42
drBeknYOSmUhhqLHPPGeLsEDWD81y9PJ+sH6UR7QWbiCJzsR1BmrzffqtXmTuySasCFyOgoNq4dFSzft
lBi2MUk7ddv9Nt6bXwEAAP//1WAssSkDAAA=
`,
	},

	"/_fixtures/m3.yml": {
		local:   "_fixtures/m3.yml",
		size:    809,
		modtime: 1519775319,
		compressed: `
H4sIAAAAAAAC/3yRQY/aMBCF7/kVT1AulUyARRVKj6s99rTqeWWcIbg4tjVjs+XfV3YCqqrtnqJ43rw3
38wSP6wjScETniD5OFoRGzxO1hFOgfHy/IL95oDXyNYP2G22h4a17RrgSly0HTbrXQPYUQ/UwbxH0izB
t2Rovzm8jb89pbc+mAtxp8f+214NMaviJFE5nUhSwyQhsyEpxibm8gE0m7NNZFJm6lB7G2D4uBy1GO1q
wYTsU4dtA3hK74EvHU7aCTUmjKP2fY05Zuv6yUmhPVrfHrWcoQwWJkLxFTOCEjbtV7SVpC0/IRLrFLg1
WVIYF1jChHjDEFxP0/YEKaB2YEJDYqJP0+aYOtfDMp0JkcMvMgmnYs/FeBJBAuhKfEvnchwd6+phfe3K
0QXdf5hYLitsinK+Us3+jj6gTHPFl1L+P3G7LlpPjzFnxn/I/0L21hCU320w6gtBPc/uWE6HmDpmcbRx
B+slaeegVBZiKLrPE2/pHDyA5UMzPx2t760f5A6dhSt4siNBnbBY/axeq1e5SaIRKyKno1C/uFu0dNVO
iWEbk7Tj03q7jrfmTwAAAP//o/v4ECkDAAA=
`,
	},

	"/_fixtures/m4.yml": {
		local:   "_fixtures/m4.yml",
		size:    809,
		modtime: 1519775323,
		compressed: `
H4sIAAAAAAAC/3yRz27bPBDE73qKgf3l8gG0HMMoDPUY5NhT0HNAU2uZNf9hl3Tqty9IyUZRpD0J4s7O
7G93jW/WkeQYCHtIOXorYmPAyTrCKTJeX16x3x7wltiGCbvt86FjbYcOuBJX7YDtZtcB1uuJBpiPRJol
hp4M7beHd/8zUH4fo7kQD9qPX/ZqSkVVJ0nK6UySOyaJhQ1JNTap1A+g2ZxtJpML04DW2wHT5+WkxWjX
CiaWkAc8d0Cg/BH5MuCknVBnovc6jC3mWKwbZyeF/mhDf9RyhjJYmQTFVywIStj0/6NvJH39iYlY58i9
KZKjX2ENE9MNU3QjzdsT5IjWgRkNmYn+mbbEtLkelvlMSBx/kMk4VXuuxrMIEkFX4ls+1+Po1FYPG1pX
SS7q8dPEellhU5XLlVr2V4wRdZor/qvlvxP3m6oN9BhzYfyD/DfkYA1Bhd0WXl8I6mVxx3o+xNyxiJNN
O9ggWTsHpYoQQ9F9nnTL5xgArB+a5elow2jDJHfoItzAs/UEdcLq6XvzenqTm2TyeCJyOgmNq7tFT1ft
lBi2KUvv95vnTbp1vwIAAP//Yzc1wykDAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/_fixtures": {
		isDir: true,
		local: "_fixtures",
	},
}
