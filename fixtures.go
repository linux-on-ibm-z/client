// Code generated by "esc -o fixtures.go -pkg client _fixtures/m1.yml _fixtures/m2.yml _fixtures/m3.yml _fixtures/m4.yml _fixtures/final.yml _fixtures/eval.yml"; DO NOT EDIT.

package client

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/_fixtures/eval.yml": {
		local:   "_fixtures/eval.yml",
		size:    1018,
		modtime: 1519773239,
		compressed: `
H4sIAAAAAAAC/+ySwW7bMBBE7/qKgV1fCtB0DKMw1GOQ/kDQc0BTK5s1RRK7pFP9fUFazinHHnMSoJ15
OzvSGr9cMB5STpMTcTFgdJ4wRsbL8wsOuyNeE7twxn73dOzYuL4DbsRV22O33XeAm8yZetj3RIYlBk2W
Drvj2/Q3UH4bor0S92YafhzUORVVSZKUN5kkd0wSC1uSCrap1Adg2F5cJpsLU4/m7YDz5+NkxBrfBjaW
kHs8dUCg/B752mM0XqizcZpMGNqaU3F+uJMU9MkFfTJygbJY2QTFN2hhq79DN+UKa9iYZuQLIXH8QzZj
jH4gRo6LCBJBN+I5X2pdJrUy4EJzleSjGT7dWLsWtlW59NZ2/8QQUdPc8K2OdWuz5YqJ2OTI2hbJcdLb
qg30EfNeaPuSUgM2JzITLQGCswQV9jtM5kpQzwsd63s1d8ciTi7t4YJk4z2UKkIMRY88ac6XGACsPzTL
q5MLgwtneRxdhNvh2U0ENWK1+d1Ym1eZJdOEDZE3SWhYPRCabsYrsexSFj3WX3Wb5i/gfwD+CwAA//88
hadh+gMAAA==
`,
	},

	"/_fixtures/final.yml": {
		local:   "_fixtures/final.yml",
		size:    700,
		modtime: 1519773291,
		compressed: `
H4sIAAAAAAAC/2yRMY/iMBCF+/yKJziak4wBoRPKlastr1pdvTLOBHw4tjVjs5d/v7IJW20VKfPemzef
1/jjPEmOgbCHlPPkRFwMGJ0njJHx+vKK4+6Et8QuXHDY7U8dG9d3wJ24anvstocOcJO5UA/7kciwxKDJ
0nF3ep/+B8rvQ7Q34t5Mw6+juqSiapIk5U0myR2TxMKWpAbbVOoHMGyvLpPNhalH83bA5ftxMmKNbwMb
S8g99h0QKH9EvvUYjRfqbJwmE4a25lycHx5JCvrsgj4buUJZrGyC4ju0sNU/oZtyhTVsTDPylZA4/iOb
MUY/ECPHRQSJoDvxnK8Vl0kNBlxorpJ8NMO3GytrYVuVC7e2+zeGiNrmjh91rBvN1ismYpMja1skx0lv
qzbQV80H0PaSUgs2JzITLQWCswQVDjtM5kZQL0s61g80D8ciTi4d4IJk4z2UKkIMRc8+ac7XGACsvzTL
r7MLgwsXeR5dhNvh2U0ENWK1+duyNm8yS6YJGyJvktCwekZouhuvxLJLWfTogvHbNHefAQAA//8HIGeb
vAIAAA==
`,
	},

	"/_fixtures/m1.yml": {
		local:   "_fixtures/m1.yml",
		size:    778,
		modtime: 1519773155,
		compressed: `
H4sIAAAAAAAC/6yRvW4bMRCE+3uKgRQ3AShKghEIl9JwmcpIbVC8lcSIf9gl5dzbB6ROrlymOuB2Znb2
4xq/nCcpKRJ2kHoMTsSliJPzhFNivL684nl7wFtmF8/Yb3eHgY0bB+BG3LQjtpv9ALhgzjTCfmQyLClq
svS8PbyHv5HK+5TslXg0YfrxrM65qpYkWXlTSMrAJKmyJWnBNtf2AQzbiytkS2Ua0b0DcP56nI1Y4/vA
phrLiN0ARCofia8jTsYLDTaFYOLU1xyr89M9SUEfXdRHIxcoi5XNUHyDFrb6O3RXrrCGTXlGuRAypz9k
C07JT8QoaRFBEuhGPJdLw2VyhwEXu6tmn8z05cbGWtg25cKt7/6JKaG1ueFbG+tOs/dKmdiUxNpWKSno
TdNG+qx5B9pfUlrB7kRhoqVAdJag4n6LYK4E9bKkY31Hc3cs4uzyHi5KMd5DqSrEUPTok+dySRHA+lOz
/Dq6OLl4lsfRVbgfXlwgqBNWT7971tObzFIo4InImyw0rR4Rmm7GK7HschEddpvdJs//M2+/yfO/AAAA
//95ruNtCgMAAA==
`,
	},

	"/_fixtures/m2.yml": {
		local:   "_fixtures/m2.yml",
		size:    699,
		modtime: 1519773286,
		compressed: `
H4sIAAAAAAAC/2yRv44iPRDE83mKEnybfJIxjNAJzYWrDS9aXbwyngZ8+J+6bfZ4+5PNsNFGI01XVVf/
vMYv50lKioQRUo/BibgUcXKecEqMt9c37LcHvGd28YxxuzsMbNw0ADfipp2w3YwD4II50wT7mcmwpKjJ
0n57+Ah/I5WPOdkr8WTC/GOvzrmqliRZeVNIysAkqbIlacE21/YBDNuLK2RLZZrQvQNw/n6cjVjj+8Cm
GsuE3QBEKp+JrxNOxgsNNoVg4tzXHKvz8yNJQR9d1EcjFyiLlc1QfIMWtvp/6K5cYQ2b8h3lQsic/pAt
OCU/E6OkRQRJoBvxvVwaLpM7DLjYXTX7ZOZvNzbWwrYpF25990/MCa3NDf+1se40e6+UiU1JrG2VkoLe
NG2kr5oPoP0lpRXsThQmWgpEZwkqjlsEcyWo1yUd6weah2MRZ5dHuCjFeA+lqhBD0bNPvpdLigDWX5rl
19HF2cWzPI+uwv3w4gJBnbB6+d2zXt7lLoUCXoi8yULz6hmh6Wa8EssuF9Fh3Ow2+T78CwAA//+DTeUU
uwIAAA==
`,
	},

	"/_fixtures/m3.yml": {
		local:   "_fixtures/m3.yml",
		size:    699,
		modtime: 1519773278,
		compressed: `
H4sIAAAAAAAC/2yRv44iPRDE83mKEnwkn2QMLDqhuXC14UWri1fG04AP/1O3zR5vf7IZNtpopOmq6uqf
l/jlPElJkfACqcfgRFyKODlPOCXG2+sb9psD3jO7eMZusz0MbNw4ADfiph2xWe8GwAVzphH2M5NhSVGT
pf3m8BH+RiofU7JX4tGE6cdenXNVLUmy8qaQlIFJUmVL0oJtru0DGLYXV8iWyjSiewfg/P04G7HG94FN
NZYR2wGIVD4TX0ecjBcabArBxKmvOVbnp0eSgj66qI9GLlAWC5uh+AYtbPX/0F25wBI25TvKhZA5/SFb
cEp+IkZJswiSQDfie7k0XCZ3GHCxu2r2yUzfbmyshW1Tztz67p+YElqbG/5rY91p9l4pE5uSWNsqJQW9
btpIXzUfQPtLSivYnShMNBeIzhJU3G0QzJWgXud0LB9oHo5ZnF3ewUUpxnsoVYUYip598r1cUgSw/NLM
v44uTi6e5Xl0Fe6HFxcI6oTF6nfPWr3LXQoFrIi8yULT4hmh6Wa8EssuF9HhZb1d5/vwLwAA///4GZgP
uwIAAA==
`,
	},

	"/_fixtures/m4.yml": {
		local:   "_fixtures/m4.yml",
		size:    699,
		modtime: 1519773274,
		compressed: `
H4sIAAAAAAAC/2yRvY4iMRCE83mKEhzJScaA0AnNhasNL1pdvDKeBnz4T902e7z9ymbYaKORpquqqz8v
8cd5kpIiYQ+px+BEXIo4OU84Jcbryyv2mwPeMrt4xm6zPQxs3DgAN+KmHbFZ7wbABXOmEfYjk2FJUZOl
/ebwHv5HKu9Tslfi0YTp116dc1UtSbLyppCUgUlSZUvSgm2u7QMYthdXyJbKNKJ7B+D8/Tgbscb3gU01
lhHbAYhUPhJfR5yMFxpsCsHEqa85VuenR5KCPrqoj0YuUBYLm6H4Bi1s9U/orlxgCZvyHeVCyJz+kS04
JT8Ro6RZBEmgG/G9XBoukzsMuNhdNftkpm83NtbCtilnbn33b0wJrc0NP9pYd5q9V8rEpiTWtkpJQa+b
NtJXzQfQ/pLSCnYnChPNBaKzBBV3GwRzJaiXOR3LB5qHYxZnl3dwUYrxHkpVIYaiZ598L5cUASy/NPOv
o4uTi2d5Hl2F++HFBYI6YbH627NWb3KXQgErIm+y0LR4Rmi6Ga/EsstFdNivt+t8Hz4DAAD//5m06k+7
AgAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/_fixtures": {
		isDir: true,
		local: "_fixtures",
	},
}
