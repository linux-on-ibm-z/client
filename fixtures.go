// Code generated by "esc -o fixtures.go -pkg client -private _fixtures/m1.yml _fixtures/m2.yml _fixtures/m3.yml _fixtures/m4.yml _fixtures/final.yml _fixtures/eval.yml"; DO NOT EDIT.

package client

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/_fixtures/eval.yml": {
		local:   "_fixtures/eval.yml",
		size:    1125,
		modtime: 1539433785,
		compressed: `
H4sIAAAAAAAC/+yTwYrbMBCG736Kn6R7KSjOhlCCe1y2L7D0vCjy2FEjS2JG8jZvXyQnYSnbnnrsKUT6
55v5NHiNb9ZrB8nHyYrY4DFYRxgC4/npGfvtAS+RrR+x2z4eGta2a4CZuGQ7bDe7BrCTHqmDeYukWYJv
ydB+e3idfnpKr30wZ+JOT/2XvRpjVoUkUTmdSFLDJCGzISlgE3P5ATSbk01kUmbqUGsbYPz4eg4u6Xpu
Qvapw2MDeEpvgc8dBu2EGhOmSfu+djlm6/oFpNAerW+PWk5QBisToXjGzUDYtJ/RVpG2/AmRWKfArcmS
wrTCGibEC8bgeloeT5ACagUWMyQm+mu3a5s61x2ZToTI4QeZhKHguYCXECSAZuJLOpXd6FhfHtbXqhxd
0P2HHctihU1Jvlf8ij6gTDPjU7n+s3G7KVlP9zGvjr+Zv1P21hCU320x6TNBPV3pWC+LWCqu4WjjDtZL
0s5BqSzEUHSbJ17SKXis74nrwdH63vpRbspZuGonOxHUgNXD90p6eJGLJJrwQOR0FOpXN0RLs3ZKDNuY
pB3KV7GJl//AfwD8FQAA//++mKRJZQQAAA==
`,
	},

	"/_fixtures/final.yml": {
		local:   "_fixtures/final.yml",
		size:    801,
		modtime: 1539433785,
		compressed: `
H4sIAAAAAAAC/3yTwY7aMBCG73mKX1AulUxYhCqUHlfbF1j1vDLOJLg4tjVjZ8vbV3YAraptTwj7n2/m
8yhr/LBeO0g+TVbEBo/BOsIQGC/PLzjsjniNbP2I/e7p2LC2XQPMxCXbYbfdN4Cd9EgdzHskzRJ8S4YO
u+Pb9NtTeuuDuRB3euq/HdQYsyokicrpRJIaJgmZDUkBm5jLD6DZnG0ikzJTh1rbAOPn13NwSddzE7JP
HZ4awFN6D3zpMGgn1JgwTdr3tcspW9cvIIX2ZH170nKGMliZCMUz7gbCpv2Ktoq05U+IxDoFbk2WFKYV
1jAhXjEG19PyeIIUUCuwmCEx0X+73drUuR7IdCZEDr/IJAwFzwW8hCABNBNf07nsRsf68rC+VuXogu4/
7VgWK2xK8qPid/QBZZoZX8r1v43bbcl6eox5c/zL/IOyt4ag/H6HSV8I6vlGx3pZxFJxC0cb97BeknYO
SmUhhqL7PPGazsFj/UjcDk7W99aPclfOwlU72YmgBqw2Pytp8ypXSTRhQ+R0FOpXd0RLs3ZKDNuYpB3K
V7GN1+ZPAAAA//+VFIpMIQMAAA==
`,
	},

	"/_fixtures/m1.yml": {
		local:   "_fixtures/m1.yml",
		size:    886,
		modtime: 1539433785,
		compressed: `
H4sIAAAAAAAC/6yRTY/aMBCG7/kVr6BcKpkAQhVKj6s99rTqeWWcIbj4SzN2tvz7ygmgVbXtaU9R7Hee
mcezxA/rSHIMhC2kHL0VsTHgZB3hFBnPT8/Ybw54SWzDgN1me2hY264BRuKa7bBZ7xrAej1QB/OWSLPE
0JKh/ebw6n8Hyq99NBfiTvv+214NqahKkqScziS5YZJY2JBUsEmlfgDN5mwzmVyYOky1DTB8fD1Gl/V0
bmIJucO2AQLlt8iXDifthBoTvdehn7oci3X9DFJojza0Ry1nKIOFSVA84m4gbNqvaCeRtv7ERKxz5NYU
ydEvsISJ6Yohup7mxxPkiKkCsxkyE/23263NNNcDmc+ExPEXmYxTxXMFzyFIBI3E13yuu9FpennYMFWV
5KLuP+xYFytsavK94nf0EXWaEV/q9b+N23XNBnqMeXP8y/ydcrCGoMJuA68vBPV0o2M5L2KuuIWTTTvY
IFk7B6WKEEPRfZ50zecYsHwkbgdHG3obBrkrF+FJO1tPUCcsVj8n0upFrpLJY0XkdBLqF3dES6N2Sgzb
lKX12/V2na6fydtV3p8AAAD///NeiO12AwAA
`,
	},

	"/_fixtures/m2.yml": {
		local:   "_fixtures/m2.yml",
		size:    806,
		modtime: 1539433785,
		compressed: `
H4sIAAAAAAAC/3yRTYvbMBCG7/4VL0n3UlCcmFCCe1z22NPS86LIE0eNvpiRvM2/L7KTsJRtT8bSO8/M
o1njh3UkOQZCBylHb0VsDDhZRzhFxsvzC/bbA14T2zCi2+4ODWvbN8BEXLM9tpuuAazXI/Uw74k0Swwt
GdpvD2/+d6D8NkRzIe61H77t1ZiKqiRJyulMkhsmiYUNSQWbVOoH0GzONpPJhanHXNsA4+fXU3RZz+cm
lpB77BogUH6PfOlx0k6oMdF7HYa5y7FYNywghfZoQ3vUcoYyWJkExRPuBsKm/Yp2FmnrT0zEOkduTZEc
/QprmJiuGKMbaHk8QY6YK7CYITPRf7vd2sxzPZD5TEgcf5HJOFU8V/ASgkTQRHzN57obneaXhw1zVUku
6uHTjnWxwqYmPyp+xxBRp5nwpV7/27jd1Gygx5g3x7/MPygHawgqdFt4fSGo5xsd62URS8UtnGzqYINk
7RyUKkIMRfd50jWfY8D6kbgdHG0YbBjlrlyEZ+1sPUGdsHr6OZOeXuUqmTyeiJxOQsPqjmhp0k6JYZuy
tL7b7Dbp2vwJAAD//w1DRw8mAwAA
`,
	},

	"/_fixtures/m3.yml": {
		local:   "_fixtures/m3.yml",
		size:    806,
		modtime: 1539433785,
		compressed: `
H4sIAAAAAAAC/3yRTY/aMBCG7/kVr6BcKpkAiyqUHld77GnV88o4Q3Dxl2bsbPn3lRNAq2rbUxT7nWfm
8SzxwzqSHAPhCVKO3orYGHCyjnCKjJfnF+w3B7wmtmHAbrM9NKxt1wAjcc122Kx3DWC9HqiDeU+kWWJo
ydB+c3jzvwPltz6aC3Gnff9tr4ZUVCVJUk5nktwwSSxsSCrYpFI/gGZztplMLkwdptoGGD6/HqPLejo3
sYTcYdsAgfJ75EuHk3ZCjYne69BPXY7Fun4GKbRHG9qjljOUwcIkKB5xNxA27Ve0k0hbf2Ii1jlya4rk
6BdYwsR0xRBdT/PjCXLEVIHZDJmJ/tvt1maa64HMZ0Li+ItMxqniuYLnECSCRuJrPtfd6DS9PGyYqkpy
UfefdqyLFTY1+VHxO/qIOs2IL/X638btumYDPca8Of5l/kE5WENQYbeB1xeCer7RsZwXMVfcwsmmHWyQ
rJ2DUkWIoeg+T7rmcwxYPhK3g6MNvQ2D3JWL8KSdrSeoExarnxNp9SpXyeSxInI6CfWLO6KlUTslhm3K
0vqn9Xadrs2fAAAA//+RxQMjJgMAAA==
`,
	},

	"/_fixtures/m4.yml": {
		local:   "_fixtures/m4.yml",
		size:    806,
		modtime: 1539433785,
		compressed: `
H4sIAAAAAAAC/3yRTYvbMBCG7/4VL0n3UlCchFCCe1z22NPS86LIE0eNvpiRvM2/L7KdsJRtT8bSO8/M
o1njh3UkOQbCAVJO3orYGHC2jnCOjJfnFxy2R7wmtmHAfrs7Nqxt1wAjcc122G72DWC9HqiDeU+kWWJo
ydBhe3zzvwPltz6aK3Gnff/toIZUVCVJUk5nktwwSSxsSCrYpFI/gGZzsZlMLkwdptoGGD6/HqPLejo3
sYTcYdcAgfJ75GuHs3ZCjYne69BPXU7Fun4GKbQnG9qTlguUwcokKB5xNxA27Ve0k0hbf2Ii1jlya4rk
6FdYw8R0wxBdT/PjCXLEVIHZDJmJ/tttaTPN9UDmCyFx/EUm41zxXMFzCBJBI/EtX+pudJpeHjZMVSW5
qPtPO9bFCpua/Kj4HX1EnWbEl3r9b+N2U7OBHmMujn+Zf1AO1hBU2G/h9ZWgnhc61vMi5oolnGzawwbJ
2jkoVYQYiu7zpFu+xID1I7EcnGzobRjkrlyEJ+1sPUGdsXr6OZGeXuUmmTyeiJxOQv3qjmhp1E6JYZuy
tP6w2W3SrfkTAAD//0VU3OYmAwAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/_fixtures": {
		isDir: true,
		local: "_fixtures",
	},
}
